<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= tableID %></title>
  <script src="https://moment.github.io/luxon/global/luxon.js"></script>
  <script src="https://unpkg.com/fast-json-patch/dist/fast-json-patch.min.js"></script>
  <script src="<%= staticserve %>/javascripts/data.js"></script>
  <script src="<%= staticserve %>/javascripts/sessions.js"></script>
  <link rel="stylesheet" href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css">
  <link rel="stylesheet" href="<%= staticserve %>/stylesheets/standardTable.css">
  <link rel="stylesheet" href="<%= staticserve %>/stylesheets/buttons.css">
</head>

<body>
  <!-- Structure -->
  <div class="page-grid">
    <div class="grid-item">
      <button id="add-row-button"></button>
    </div>
    <div class="grid-item">
      <button id="print-button">Print</button>
    </div>
    <div class="grid-item">
      <div id="main-table"></div>
    </div>
    <div class="grid-item">
      <button id="add-column-button"></button>
    </div>
    <div id="sheet-bar-container">
      <div class="sheet-button-container">
        <button class="sheet-button" id="new-sheet-button" onclick="CreateList('someName')">New sheet</button>
      </div>
        <div id="Songpool-Btn" class="button-77" contenteditable="true" onclick="setupTable(0)">Songpool</div>
    </div>
  </div>



  <!-- Main table script -->
  <script src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
  <script>
    let oldData=null;
    let meta = <%- meta %>; //remember to use the - not the = for raw input

    //Setting up a default table
    function setupTable(listID){
      //set url to load data from via ajax in constructor
      let jsonURL = '<%= host %>/<%= tableID %>/'+listID; //maybe preload this?
      //console.log(jsonURL);

      //console.log("Create table with id "+id)
      if(table)
        table.destroy();
      table = new Tabulator("#main-table", {
        persistence:true,
        persistenceID: listID,
        // TODO: custom persistence functions. current ones don't work
        //persistenceWriterFunc: persistenceWriter,
        //persistenceReaderFunc: persistenceReader,
        movableRows:true,
        movableColumns: true,
        rowHeader:{headerSort:false, resizable: false, minWidth:30, width:30, rowHandle:true, formatter:"handle"},
        columns:[
            {title:"Title", field:"title", editor:"input", frozen:true},
            {title:"Duration", field:"duration", formatter:"datetimediff", editor:"input"},
            {title:"Tempo", field:"tempo", sorter:"number", editor:"input"},
            {title:"Key (original)", field:"key_original", editor:"input"},
            {title:"Key (cover)", field:"key_cover", editor:"input"},
            {title:"Comment", field:"comment", editor:"input"},
            {title:"Notes", field:"notes"}
        ],
        //data:loadTableData(id) //Load right away, elsewise it fails because initializing takes time.,
        //data: getJson('<%= host %>', '<%= tableID %>')
        ajaxURL: jsonURL
      });
      //getJson('<%= host %>', id);
      table.on("tableBuilt", function () {
            //console.log("-----Table is fully initialized.");
            oldData = table.getData();
          });

      // Immediately save changes in data
      table.on("dataChanged", function() {
              //saveTableData(table); //this is in "offline" mode, where the table can be saved...
              //... but we need something like "syncTableData":
              console.log("-----dataChanged!");
              //create patch by comparing latest data with old data
              try {
                const patches = jsonpatch.compare(oldData, table.getData());
                patchToServer("<%= serverurl %>", {patches: patches, listID: listID});
              } catch (error) {
                console.log('cant compute patch');
              }
              oldData = table.getData();
              //putToServer("<%= serverurl %>", {list: id, tableData: table.getData()});
      });
    }
  </script>

  <!-- Handle Sheets -->
  <script>
    function AddSheetButton(listMeta) {
      const buttonContainer = document.querySelector('.sheet-button-container');
      const newButton = document.createElement('button');
      newButton.classList.add('sheet-button');  // Adding a class
      newButton.id = 'List-Button-'+listMeta.listID; //Add the id
      newButton.onclick=setupTable.bind(null, listMeta.listID) //TODO: probably a single eventlistener on the button container is more appropriate then one on each button
      newButton.contentEditable=true;
      newButton.textContent = listMeta.name;
      buttonContainer.appendChild(newButton);
    }

    function CreateList(name) {
      fetch("<%= host %>/<%= tableID %>", {
        method: 'PUT', // Specify the HTTP method
        headers: {
          'Content-Type': 'text/plain', // Inform the server about the plain text format
        },
        body: name, // Send the text payload directly
      }).then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.json(); // Parse the text response from the server
      }).then((data) => {
        meta = data.meta
        //create the button
        AddSheetButton(data.newListMeta);
        console.log('Server Response:', data); // Handle the response
      }).catch((error) => {
        console.error('Error:', error); // Handle any errors
      });
    }
  </script>


  <!-- Initialize -->
  <script>
    let table = null;
    setupTable(0); //setup the table base on ID, which is always 0 for the pool and a running index for further lists
    meta.lists.forEach((listMeta) =>{AddSheetButton(listMeta)});
  </script>


  <!-- Event listeners -->
  <script>
    // Add table buttons functionality
    document.getElementById("add-column-button").addEventListener("click", () => {
      table.addColumn();
    });
    document.getElementById("add-row-button").addEventListener("click", () => {
      table.addRow();
    });
  </script>

  <!-- Saving and loading -->
</body>
</html>
